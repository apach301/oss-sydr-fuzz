diff --git a/util/symcc_fuzzing_helper/src/main.rs b/util/symcc_fuzzing_helper/src/main.rs
index 9af0136..0933af3 100644
--- a/util/symcc_fuzzing_helper/src/main.rs
+++ b/util/symcc_fuzzing_helper/src/main.rs
@@ -52,6 +52,19 @@ struct CLI {
 
     /// Program under test
     command: Vec<String>,
+
+    /// Use afl-showmap or not
+    /// This option is added as I had some difficulties
+    /// getting afl-showmap to work with aflplusplus.
+    /// The issue was that all of the files generated by
+    /// afl-showmap had the exact same layout, hence no "new"
+    /// seeds were ever created. For now, I enable a feature
+    /// that makes it possible to skip the afl-showmap step,
+    /// however, the consequences of this is that all seeds generated
+    /// by symcc will be copied into AFL, including seeds that do not
+    /// trigger new code coverage.
+    #[clap(short = 'm')]
+    dont_use_showmap: bool,
 }
 
 /// Execution statistics.
@@ -219,6 +232,7 @@ impl State {
         input: impl AsRef<Path>,
         symcc: &SymCC,
         afl_config: &AflConfig,
+        dont_use_showmap: bool,
     ) -> Result<()> {
         log::info!("Running on input {}", input.as_ref().display());
 
@@ -232,7 +246,7 @@ impl State {
             .run(&input, tmp_dir.path().join("output"))
             .context("Failed to run SymCC")?;
         for new_test in symcc_result.test_cases.iter() {
-            let res = process_new_testcase(&new_test, &input, &tmp_dir, &afl_config, self)?;
+            let res = process_new_testcase(&new_test, &input, &tmp_dir, &afl_config, dont_use_showmap, self)?;
 
             num_total += 1;
             if res == TestcaseResult::New {
@@ -311,7 +325,7 @@ fn main() -> Result<()> {
                 log::debug!("Waiting for new test cases...");
                 thread::sleep(Duration::from_secs(5));
             }
-            Some(input) => state.test_input(&input, &symcc, &afl_config)?,
+            Some(input) => state.test_input(&input, &symcc, &afl_config, options.dont_use_showmap)?,
         }
 
         if state.last_stats_output.elapsed().as_secs() > STATS_INTERVAL_SEC {
@@ -339,10 +353,22 @@ fn process_new_testcase(
     parent: impl AsRef<Path>,
     tmp_dir: impl AsRef<Path>,
     afl_config: &AflConfig,
+    dont_use_showmap: bool,
     state: &mut State,
 ) -> Result<TestcaseResult> {
     log::debug!("Processing test case {}", testcase.as_ref().display());
 
+    if dont_use_showmap {
+        symcc::copy_testcase(&testcase, &mut state.queue, parent).with_context(|| {
+            format!(
+                "Failed to enqueue the new test case {}",
+                testcase.as_ref().display()
+            )
+        })?;
+
+        Ok(TestcaseResult::New)
+    } else {
+
     let testcase_bitmap_path = tmp_dir.as_ref().join("testcase_bitmap");
     match afl_config
         .run_showmap(&testcase_bitmap_path, &testcase)
@@ -389,4 +415,6 @@ fn process_new_testcase(
             Ok(TestcaseResult::Crash)
         }
     }
+
+    } // else
 }

